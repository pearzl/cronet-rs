/* automatically generated by rust-bindgen 0.70.1 */

pub type Cronet_String = *const ::std::os::raw::c_char;
pub type Cronet_RawDataPtr = *mut ::std::os::raw::c_void;
pub type Cronet_ClientContext = *mut ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Cronet_Buffer {
    _unused: [u8; 0],
}
pub type Cronet_BufferPtr = *mut Cronet_Buffer;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Cronet_BufferCallback {
    _unused: [u8; 0],
}
pub type Cronet_BufferCallbackPtr = *mut Cronet_BufferCallback;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Cronet_Runnable {
    _unused: [u8; 0],
}
pub type Cronet_RunnablePtr = *mut Cronet_Runnable;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Cronet_Executor {
    _unused: [u8; 0],
}
pub type Cronet_ExecutorPtr = *mut Cronet_Executor;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Cronet_Engine {
    _unused: [u8; 0],
}
pub type Cronet_EnginePtr = *mut Cronet_Engine;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Cronet_UrlRequestStatusListener {
    _unused: [u8; 0],
}
pub type Cronet_UrlRequestStatusListenerPtr = *mut Cronet_UrlRequestStatusListener;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Cronet_UrlRequestCallback {
    _unused: [u8; 0],
}
pub type Cronet_UrlRequestCallbackPtr = *mut Cronet_UrlRequestCallback;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Cronet_UploadDataSink {
    _unused: [u8; 0],
}
pub type Cronet_UploadDataSinkPtr = *mut Cronet_UploadDataSink;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Cronet_UploadDataProvider {
    _unused: [u8; 0],
}
pub type Cronet_UploadDataProviderPtr = *mut Cronet_UploadDataProvider;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Cronet_UrlRequest {
    _unused: [u8; 0],
}
pub type Cronet_UrlRequestPtr = *mut Cronet_UrlRequest;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Cronet_RequestFinishedInfoListener {
    _unused: [u8; 0],
}
pub type Cronet_RequestFinishedInfoListenerPtr = *mut Cronet_RequestFinishedInfoListener;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Cronet_Error {
    _unused: [u8; 0],
}
pub type Cronet_ErrorPtr = *mut Cronet_Error;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Cronet_QuicHint {
    _unused: [u8; 0],
}
pub type Cronet_QuicHintPtr = *mut Cronet_QuicHint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Cronet_PublicKeyPins {
    _unused: [u8; 0],
}
pub type Cronet_PublicKeyPinsPtr = *mut Cronet_PublicKeyPins;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Cronet_EngineParams {
    _unused: [u8; 0],
}
pub type Cronet_EngineParamsPtr = *mut Cronet_EngineParams;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Cronet_HttpHeader {
    _unused: [u8; 0],
}
pub type Cronet_HttpHeaderPtr = *mut Cronet_HttpHeader;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Cronet_UrlResponseInfo {
    _unused: [u8; 0],
}
pub type Cronet_UrlResponseInfoPtr = *mut Cronet_UrlResponseInfo;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Cronet_UrlRequestParams {
    _unused: [u8; 0],
}
pub type Cronet_UrlRequestParamsPtr = *mut Cronet_UrlRequestParams;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Cronet_DateTime {
    _unused: [u8; 0],
}
pub type Cronet_DateTimePtr = *mut Cronet_DateTime;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Cronet_Metrics {
    _unused: [u8; 0],
}
pub type Cronet_MetricsPtr = *mut Cronet_Metrics;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Cronet_RequestFinishedInfo {
    _unused: [u8; 0],
}
pub type Cronet_RequestFinishedInfoPtr = *mut Cronet_RequestFinishedInfo;
#[repr(i32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum Cronet_RESULT {
    Cronet_RESULT_SUCCESS = 0,
    Cronet_RESULT_ILLEGAL_ARGUMENT = -100,
    Cronet_RESULT_ILLEGAL_ARGUMENT_STORAGE_PATH_MUST_EXIST = -101,
    Cronet_RESULT_ILLEGAL_ARGUMENT_INVALID_PIN = -102,
    Cronet_RESULT_ILLEGAL_ARGUMENT_INVALID_HOSTNAME = -103,
    Cronet_RESULT_ILLEGAL_ARGUMENT_INVALID_HTTP_METHOD = -104,
    Cronet_RESULT_ILLEGAL_ARGUMENT_INVALID_HTTP_HEADER = -105,
    Cronet_RESULT_ILLEGAL_STATE = -200,
    Cronet_RESULT_ILLEGAL_STATE_STORAGE_PATH_IN_USE = -201,
    Cronet_RESULT_ILLEGAL_STATE_CANNOT_SHUTDOWN_ENGINE_FROM_NETWORK_THREAD = -202,
    Cronet_RESULT_ILLEGAL_STATE_ENGINE_ALREADY_STARTED = -203,
    Cronet_RESULT_ILLEGAL_STATE_REQUEST_ALREADY_STARTED = -204,
    Cronet_RESULT_ILLEGAL_STATE_REQUEST_NOT_INITIALIZED = -205,
    Cronet_RESULT_ILLEGAL_STATE_REQUEST_ALREADY_INITIALIZED = -206,
    Cronet_RESULT_ILLEGAL_STATE_REQUEST_NOT_STARTED = -207,
    Cronet_RESULT_ILLEGAL_STATE_UNEXPECTED_REDIRECT = -208,
    Cronet_RESULT_ILLEGAL_STATE_UNEXPECTED_READ = -209,
    Cronet_RESULT_ILLEGAL_STATE_READ_FAILED = -210,
    Cronet_RESULT_NULL_POINTER = -300,
    Cronet_RESULT_NULL_POINTER_HOSTNAME = -301,
    Cronet_RESULT_NULL_POINTER_SHA256_PINS = -302,
    Cronet_RESULT_NULL_POINTER_EXPIRATION_DATE = -303,
    Cronet_RESULT_NULL_POINTER_ENGINE = -304,
    Cronet_RESULT_NULL_POINTER_URL = -305,
    Cronet_RESULT_NULL_POINTER_CALLBACK = -306,
    Cronet_RESULT_NULL_POINTER_EXECUTOR = -307,
    Cronet_RESULT_NULL_POINTER_METHOD = -308,
    Cronet_RESULT_NULL_POINTER_HEADER_NAME = -309,
    Cronet_RESULT_NULL_POINTER_HEADER_VALUE = -310,
    Cronet_RESULT_NULL_POINTER_PARAMS = -311,
    Cronet_RESULT_NULL_POINTER_REQUEST_FINISHED_INFO_LISTENER_EXECUTOR = -312,
}
#[repr(u32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum Cronet_Error_ERROR_CODE {
    Cronet_Error_ERROR_CODE_ERROR_CALLBACK = 0,
    Cronet_Error_ERROR_CODE_ERROR_HOSTNAME_NOT_RESOLVED = 1,
    Cronet_Error_ERROR_CODE_ERROR_INTERNET_DISCONNECTED = 2,
    Cronet_Error_ERROR_CODE_ERROR_NETWORK_CHANGED = 3,
    Cronet_Error_ERROR_CODE_ERROR_TIMED_OUT = 4,
    Cronet_Error_ERROR_CODE_ERROR_CONNECTION_CLOSED = 5,
    Cronet_Error_ERROR_CODE_ERROR_CONNECTION_TIMED_OUT = 6,
    Cronet_Error_ERROR_CODE_ERROR_CONNECTION_REFUSED = 7,
    Cronet_Error_ERROR_CODE_ERROR_CONNECTION_RESET = 8,
    Cronet_Error_ERROR_CODE_ERROR_ADDRESS_UNREACHABLE = 9,
    Cronet_Error_ERROR_CODE_ERROR_QUIC_PROTOCOL_FAILED = 10,
    Cronet_Error_ERROR_CODE_ERROR_OTHER = 11,
}
#[repr(u32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum Cronet_EngineParams_HTTP_CACHE_MODE {
    Cronet_EngineParams_HTTP_CACHE_MODE_DISABLED = 0,
    Cronet_EngineParams_HTTP_CACHE_MODE_IN_MEMORY = 1,
    Cronet_EngineParams_HTTP_CACHE_MODE_DISK_NO_HTTP = 2,
    Cronet_EngineParams_HTTP_CACHE_MODE_DISK = 3,
}
#[repr(u32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum Cronet_UrlRequestParams_REQUEST_PRIORITY {
    Cronet_UrlRequestParams_REQUEST_PRIORITY_REQUEST_PRIORITY_IDLE = 0,
    Cronet_UrlRequestParams_REQUEST_PRIORITY_REQUEST_PRIORITY_LOWEST = 1,
    Cronet_UrlRequestParams_REQUEST_PRIORITY_REQUEST_PRIORITY_LOW = 2,
    Cronet_UrlRequestParams_REQUEST_PRIORITY_REQUEST_PRIORITY_MEDIUM = 3,
    Cronet_UrlRequestParams_REQUEST_PRIORITY_REQUEST_PRIORITY_HIGHEST = 4,
}
#[repr(u32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum Cronet_UrlRequestParams_IDEMPOTENCY {
    Cronet_UrlRequestParams_IDEMPOTENCY_DEFAULT_IDEMPOTENCY = 0,
    Cronet_UrlRequestParams_IDEMPOTENCY_IDEMPOTENT = 1,
    Cronet_UrlRequestParams_IDEMPOTENCY_NOT_IDEMPOTENT = 2,
}
#[repr(u32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum Cronet_RequestFinishedInfo_FINISHED_REASON {
    Cronet_RequestFinishedInfo_FINISHED_REASON_SUCCEEDED = 0,
    Cronet_RequestFinishedInfo_FINISHED_REASON_FAILED = 1,
    Cronet_RequestFinishedInfo_FINISHED_REASON_CANCELED = 2,
}
#[repr(i32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum Cronet_UrlRequestStatusListener_Status {
    Cronet_UrlRequestStatusListener_Status_INVALID = -1,
    Cronet_UrlRequestStatusListener_Status_IDLE = 0,
    Cronet_UrlRequestStatusListener_Status_WAITING_FOR_STALLED_SOCKET_POOL = 1,
    Cronet_UrlRequestStatusListener_Status_WAITING_FOR_AVAILABLE_SOCKET = 2,
    Cronet_UrlRequestStatusListener_Status_WAITING_FOR_DELEGATE = 3,
    Cronet_UrlRequestStatusListener_Status_WAITING_FOR_CACHE = 4,
    Cronet_UrlRequestStatusListener_Status_DOWNLOADING_PAC_FILE = 5,
    Cronet_UrlRequestStatusListener_Status_RESOLVING_PROXY_FOR_URL = 6,
    Cronet_UrlRequestStatusListener_Status_RESOLVING_HOST_IN_PAC_FILE = 7,
    Cronet_UrlRequestStatusListener_Status_ESTABLISHING_PROXY_TUNNEL = 8,
    Cronet_UrlRequestStatusListener_Status_RESOLVING_HOST = 9,
    Cronet_UrlRequestStatusListener_Status_CONNECTING = 10,
    Cronet_UrlRequestStatusListener_Status_SSL_HANDSHAKE = 11,
    Cronet_UrlRequestStatusListener_Status_SENDING_REQUEST = 12,
    Cronet_UrlRequestStatusListener_Status_WAITING_FOR_RESPONSE = 13,
    Cronet_UrlRequestStatusListener_Status_READING_RESPONSE = 14,
}
extern "C" {
    pub fn Cronet_Buffer_Create() -> Cronet_BufferPtr;
}
extern "C" {
    pub fn Cronet_Buffer_Destroy(self_: Cronet_BufferPtr);
}
extern "C" {
    pub fn Cronet_Buffer_SetClientContext(
        self_: Cronet_BufferPtr,
        client_context: Cronet_ClientContext,
    );
}
extern "C" {
    pub fn Cronet_Buffer_GetClientContext(self_: Cronet_BufferPtr) -> Cronet_ClientContext;
}
extern "C" {
    pub fn Cronet_Buffer_InitWithDataAndCallback(
        self_: Cronet_BufferPtr,
        data: Cronet_RawDataPtr,
        size: u64,
        callback: Cronet_BufferCallbackPtr,
    );
}
extern "C" {
    pub fn Cronet_Buffer_InitWithAlloc(self_: Cronet_BufferPtr, size: u64);
}
extern "C" {
    pub fn Cronet_Buffer_GetSize(self_: Cronet_BufferPtr) -> u64;
}
extern "C" {
    pub fn Cronet_Buffer_GetData(self_: Cronet_BufferPtr) -> Cronet_RawDataPtr;
}
pub type Cronet_Buffer_InitWithDataAndCallbackFunc = ::std::option::Option<
    unsafe extern "C" fn(
        self_: Cronet_BufferPtr,
        data: Cronet_RawDataPtr,
        size: u64,
        callback: Cronet_BufferCallbackPtr,
    ),
>;
pub type Cronet_Buffer_InitWithAllocFunc =
    ::std::option::Option<unsafe extern "C" fn(self_: Cronet_BufferPtr, size: u64)>;
pub type Cronet_Buffer_GetSizeFunc =
    ::std::option::Option<unsafe extern "C" fn(self_: Cronet_BufferPtr) -> u64>;
pub type Cronet_Buffer_GetDataFunc =
    ::std::option::Option<unsafe extern "C" fn(self_: Cronet_BufferPtr) -> Cronet_RawDataPtr>;
extern "C" {
    pub fn Cronet_Buffer_CreateWith(
        InitWithDataAndCallbackFunc: Cronet_Buffer_InitWithDataAndCallbackFunc,
        InitWithAllocFunc: Cronet_Buffer_InitWithAllocFunc,
        GetSizeFunc: Cronet_Buffer_GetSizeFunc,
        GetDataFunc: Cronet_Buffer_GetDataFunc,
    ) -> Cronet_BufferPtr;
}
extern "C" {
    pub fn Cronet_BufferCallback_Destroy(self_: Cronet_BufferCallbackPtr);
}
extern "C" {
    pub fn Cronet_BufferCallback_SetClientContext(
        self_: Cronet_BufferCallbackPtr,
        client_context: Cronet_ClientContext,
    );
}
extern "C" {
    pub fn Cronet_BufferCallback_GetClientContext(
        self_: Cronet_BufferCallbackPtr,
    ) -> Cronet_ClientContext;
}
extern "C" {
    pub fn Cronet_BufferCallback_OnDestroy(
        self_: Cronet_BufferCallbackPtr,
        buffer: Cronet_BufferPtr,
    );
}
pub type Cronet_BufferCallback_OnDestroyFunc = ::std::option::Option<
    unsafe extern "C" fn(self_: Cronet_BufferCallbackPtr, buffer: Cronet_BufferPtr),
>;
extern "C" {
    pub fn Cronet_BufferCallback_CreateWith(
        OnDestroyFunc: Cronet_BufferCallback_OnDestroyFunc,
    ) -> Cronet_BufferCallbackPtr;
}
extern "C" {
    pub fn Cronet_Runnable_Destroy(self_: Cronet_RunnablePtr);
}
extern "C" {
    pub fn Cronet_Runnable_SetClientContext(
        self_: Cronet_RunnablePtr,
        client_context: Cronet_ClientContext,
    );
}
extern "C" {
    pub fn Cronet_Runnable_GetClientContext(self_: Cronet_RunnablePtr) -> Cronet_ClientContext;
}
extern "C" {
    pub fn Cronet_Runnable_Run(self_: Cronet_RunnablePtr);
}
pub type Cronet_Runnable_RunFunc =
    ::std::option::Option<unsafe extern "C" fn(self_: Cronet_RunnablePtr)>;
extern "C" {
    pub fn Cronet_Runnable_CreateWith(RunFunc: Cronet_Runnable_RunFunc) -> Cronet_RunnablePtr;
}
extern "C" {
    pub fn Cronet_Executor_Destroy(self_: Cronet_ExecutorPtr);
}
extern "C" {
    pub fn Cronet_Executor_SetClientContext(
        self_: Cronet_ExecutorPtr,
        client_context: Cronet_ClientContext,
    );
}
extern "C" {
    pub fn Cronet_Executor_GetClientContext(self_: Cronet_ExecutorPtr) -> Cronet_ClientContext;
}
extern "C" {
    pub fn Cronet_Executor_Execute(self_: Cronet_ExecutorPtr, command: Cronet_RunnablePtr);
}
pub type Cronet_Executor_ExecuteFunc = ::std::option::Option<
    unsafe extern "C" fn(self_: Cronet_ExecutorPtr, command: Cronet_RunnablePtr),
>;
extern "C" {
    pub fn Cronet_Executor_CreateWith(
        ExecuteFunc: Cronet_Executor_ExecuteFunc,
    ) -> Cronet_ExecutorPtr;
}
extern "C" {
    pub fn Cronet_Engine_Create() -> Cronet_EnginePtr;
}
extern "C" {
    pub fn Cronet_Engine_Destroy(self_: Cronet_EnginePtr);
}
extern "C" {
    pub fn Cronet_Engine_SetClientContext(
        self_: Cronet_EnginePtr,
        client_context: Cronet_ClientContext,
    );
}
extern "C" {
    pub fn Cronet_Engine_GetClientContext(self_: Cronet_EnginePtr) -> Cronet_ClientContext;
}
extern "C" {
    pub fn Cronet_Engine_StartWithParams(
        self_: Cronet_EnginePtr,
        params: Cronet_EngineParamsPtr,
    ) -> Cronet_RESULT;
}
extern "C" {
    pub fn Cronet_Engine_StartNetLogToFile(
        self_: Cronet_EnginePtr,
        file_name: Cronet_String,
        log_all: bool,
    ) -> bool;
}
extern "C" {
    pub fn Cronet_Engine_StopNetLog(self_: Cronet_EnginePtr);
}
extern "C" {
    pub fn Cronet_Engine_Shutdown(self_: Cronet_EnginePtr) -> Cronet_RESULT;
}
extern "C" {
    pub fn Cronet_Engine_GetVersionString(self_: Cronet_EnginePtr) -> Cronet_String;
}
extern "C" {
    pub fn Cronet_Engine_GetDefaultUserAgent(self_: Cronet_EnginePtr) -> Cronet_String;
}
extern "C" {
    pub fn Cronet_Engine_AddRequestFinishedListener(
        self_: Cronet_EnginePtr,
        listener: Cronet_RequestFinishedInfoListenerPtr,
        executor: Cronet_ExecutorPtr,
    );
}
extern "C" {
    pub fn Cronet_Engine_RemoveRequestFinishedListener(
        self_: Cronet_EnginePtr,
        listener: Cronet_RequestFinishedInfoListenerPtr,
    );
}
pub type Cronet_Engine_StartWithParamsFunc = ::std::option::Option<
    unsafe extern "C" fn(self_: Cronet_EnginePtr, params: Cronet_EngineParamsPtr) -> Cronet_RESULT,
>;
pub type Cronet_Engine_StartNetLogToFileFunc = ::std::option::Option<
    unsafe extern "C" fn(self_: Cronet_EnginePtr, file_name: Cronet_String, log_all: bool) -> bool,
>;
pub type Cronet_Engine_StopNetLogFunc =
    ::std::option::Option<unsafe extern "C" fn(self_: Cronet_EnginePtr)>;
pub type Cronet_Engine_ShutdownFunc =
    ::std::option::Option<unsafe extern "C" fn(self_: Cronet_EnginePtr) -> Cronet_RESULT>;
pub type Cronet_Engine_GetVersionStringFunc =
    ::std::option::Option<unsafe extern "C" fn(self_: Cronet_EnginePtr) -> Cronet_String>;
pub type Cronet_Engine_GetDefaultUserAgentFunc =
    ::std::option::Option<unsafe extern "C" fn(self_: Cronet_EnginePtr) -> Cronet_String>;
pub type Cronet_Engine_AddRequestFinishedListenerFunc = ::std::option::Option<
    unsafe extern "C" fn(
        self_: Cronet_EnginePtr,
        listener: Cronet_RequestFinishedInfoListenerPtr,
        executor: Cronet_ExecutorPtr,
    ),
>;
pub type Cronet_Engine_RemoveRequestFinishedListenerFunc = ::std::option::Option<
    unsafe extern "C" fn(self_: Cronet_EnginePtr, listener: Cronet_RequestFinishedInfoListenerPtr),
>;
extern "C" {
    pub fn Cronet_Engine_CreateWith(
        StartWithParamsFunc: Cronet_Engine_StartWithParamsFunc,
        StartNetLogToFileFunc: Cronet_Engine_StartNetLogToFileFunc,
        StopNetLogFunc: Cronet_Engine_StopNetLogFunc,
        ShutdownFunc: Cronet_Engine_ShutdownFunc,
        GetVersionStringFunc: Cronet_Engine_GetVersionStringFunc,
        GetDefaultUserAgentFunc: Cronet_Engine_GetDefaultUserAgentFunc,
        AddRequestFinishedListenerFunc: Cronet_Engine_AddRequestFinishedListenerFunc,
        RemoveRequestFinishedListenerFunc: Cronet_Engine_RemoveRequestFinishedListenerFunc,
    ) -> Cronet_EnginePtr;
}
extern "C" {
    pub fn Cronet_UrlRequestStatusListener_Destroy(self_: Cronet_UrlRequestStatusListenerPtr);
}
extern "C" {
    pub fn Cronet_UrlRequestStatusListener_SetClientContext(
        self_: Cronet_UrlRequestStatusListenerPtr,
        client_context: Cronet_ClientContext,
    );
}
extern "C" {
    pub fn Cronet_UrlRequestStatusListener_GetClientContext(
        self_: Cronet_UrlRequestStatusListenerPtr,
    ) -> Cronet_ClientContext;
}
extern "C" {
    pub fn Cronet_UrlRequestStatusListener_OnStatus(
        self_: Cronet_UrlRequestStatusListenerPtr,
        status: Cronet_UrlRequestStatusListener_Status,
    );
}
pub type Cronet_UrlRequestStatusListener_OnStatusFunc = ::std::option::Option<
    unsafe extern "C" fn(
        self_: Cronet_UrlRequestStatusListenerPtr,
        status: Cronet_UrlRequestStatusListener_Status,
    ),
>;
extern "C" {
    pub fn Cronet_UrlRequestStatusListener_CreateWith(
        OnStatusFunc: Cronet_UrlRequestStatusListener_OnStatusFunc,
    ) -> Cronet_UrlRequestStatusListenerPtr;
}
extern "C" {
    pub fn Cronet_UrlRequestCallback_Destroy(self_: Cronet_UrlRequestCallbackPtr);
}
extern "C" {
    pub fn Cronet_UrlRequestCallback_SetClientContext(
        self_: Cronet_UrlRequestCallbackPtr,
        client_context: Cronet_ClientContext,
    );
}
extern "C" {
    pub fn Cronet_UrlRequestCallback_GetClientContext(
        self_: Cronet_UrlRequestCallbackPtr,
    ) -> Cronet_ClientContext;
}
extern "C" {
    pub fn Cronet_UrlRequestCallback_OnRedirectReceived(
        self_: Cronet_UrlRequestCallbackPtr,
        request: Cronet_UrlRequestPtr,
        info: Cronet_UrlResponseInfoPtr,
        new_location_url: Cronet_String,
    );
}
extern "C" {
    pub fn Cronet_UrlRequestCallback_OnResponseStarted(
        self_: Cronet_UrlRequestCallbackPtr,
        request: Cronet_UrlRequestPtr,
        info: Cronet_UrlResponseInfoPtr,
    );
}
extern "C" {
    pub fn Cronet_UrlRequestCallback_OnReadCompleted(
        self_: Cronet_UrlRequestCallbackPtr,
        request: Cronet_UrlRequestPtr,
        info: Cronet_UrlResponseInfoPtr,
        buffer: Cronet_BufferPtr,
        bytes_read: u64,
    );
}
extern "C" {
    pub fn Cronet_UrlRequestCallback_OnSucceeded(
        self_: Cronet_UrlRequestCallbackPtr,
        request: Cronet_UrlRequestPtr,
        info: Cronet_UrlResponseInfoPtr,
    );
}
extern "C" {
    pub fn Cronet_UrlRequestCallback_OnFailed(
        self_: Cronet_UrlRequestCallbackPtr,
        request: Cronet_UrlRequestPtr,
        info: Cronet_UrlResponseInfoPtr,
        error: Cronet_ErrorPtr,
    );
}
extern "C" {
    pub fn Cronet_UrlRequestCallback_OnCanceled(
        self_: Cronet_UrlRequestCallbackPtr,
        request: Cronet_UrlRequestPtr,
        info: Cronet_UrlResponseInfoPtr,
    );
}
pub type Cronet_UrlRequestCallback_OnRedirectReceivedFunc = ::std::option::Option<
    unsafe extern "C" fn(
        self_: Cronet_UrlRequestCallbackPtr,
        request: Cronet_UrlRequestPtr,
        info: Cronet_UrlResponseInfoPtr,
        new_location_url: Cronet_String,
    ),
>;
pub type Cronet_UrlRequestCallback_OnResponseStartedFunc = ::std::option::Option<
    unsafe extern "C" fn(
        self_: Cronet_UrlRequestCallbackPtr,
        request: Cronet_UrlRequestPtr,
        info: Cronet_UrlResponseInfoPtr,
    ),
>;
pub type Cronet_UrlRequestCallback_OnReadCompletedFunc = ::std::option::Option<
    unsafe extern "C" fn(
        self_: Cronet_UrlRequestCallbackPtr,
        request: Cronet_UrlRequestPtr,
        info: Cronet_UrlResponseInfoPtr,
        buffer: Cronet_BufferPtr,
        bytes_read: u64,
    ),
>;
pub type Cronet_UrlRequestCallback_OnSucceededFunc = ::std::option::Option<
    unsafe extern "C" fn(
        self_: Cronet_UrlRequestCallbackPtr,
        request: Cronet_UrlRequestPtr,
        info: Cronet_UrlResponseInfoPtr,
    ),
>;
pub type Cronet_UrlRequestCallback_OnFailedFunc = ::std::option::Option<
    unsafe extern "C" fn(
        self_: Cronet_UrlRequestCallbackPtr,
        request: Cronet_UrlRequestPtr,
        info: Cronet_UrlResponseInfoPtr,
        error: Cronet_ErrorPtr,
    ),
>;
pub type Cronet_UrlRequestCallback_OnCanceledFunc = ::std::option::Option<
    unsafe extern "C" fn(
        self_: Cronet_UrlRequestCallbackPtr,
        request: Cronet_UrlRequestPtr,
        info: Cronet_UrlResponseInfoPtr,
    ),
>;
extern "C" {
    pub fn Cronet_UrlRequestCallback_CreateWith(
        OnRedirectReceivedFunc: Cronet_UrlRequestCallback_OnRedirectReceivedFunc,
        OnResponseStartedFunc: Cronet_UrlRequestCallback_OnResponseStartedFunc,
        OnReadCompletedFunc: Cronet_UrlRequestCallback_OnReadCompletedFunc,
        OnSucceededFunc: Cronet_UrlRequestCallback_OnSucceededFunc,
        OnFailedFunc: Cronet_UrlRequestCallback_OnFailedFunc,
        OnCanceledFunc: Cronet_UrlRequestCallback_OnCanceledFunc,
    ) -> Cronet_UrlRequestCallbackPtr;
}
extern "C" {
    pub fn Cronet_UploadDataSink_Create() -> Cronet_UploadDataSinkPtr;
}
extern "C" {
    pub fn Cronet_UploadDataSink_Destroy(self_: Cronet_UploadDataSinkPtr);
}
extern "C" {
    pub fn Cronet_UploadDataSink_SetClientContext(
        self_: Cronet_UploadDataSinkPtr,
        client_context: Cronet_ClientContext,
    );
}
extern "C" {
    pub fn Cronet_UploadDataSink_GetClientContext(
        self_: Cronet_UploadDataSinkPtr,
    ) -> Cronet_ClientContext;
}
extern "C" {
    pub fn Cronet_UploadDataSink_OnReadSucceeded(
        self_: Cronet_UploadDataSinkPtr,
        bytes_read: u64,
        final_chunk: bool,
    );
}
extern "C" {
    pub fn Cronet_UploadDataSink_OnReadError(
        self_: Cronet_UploadDataSinkPtr,
        error_message: Cronet_String,
    );
}
extern "C" {
    pub fn Cronet_UploadDataSink_OnRewindSucceeded(self_: Cronet_UploadDataSinkPtr);
}
extern "C" {
    pub fn Cronet_UploadDataSink_OnRewindError(
        self_: Cronet_UploadDataSinkPtr,
        error_message: Cronet_String,
    );
}
pub type Cronet_UploadDataSink_OnReadSucceededFunc = ::std::option::Option<
    unsafe extern "C" fn(self_: Cronet_UploadDataSinkPtr, bytes_read: u64, final_chunk: bool),
>;
pub type Cronet_UploadDataSink_OnReadErrorFunc = ::std::option::Option<
    unsafe extern "C" fn(self_: Cronet_UploadDataSinkPtr, error_message: Cronet_String),
>;
pub type Cronet_UploadDataSink_OnRewindSucceededFunc =
    ::std::option::Option<unsafe extern "C" fn(self_: Cronet_UploadDataSinkPtr)>;
pub type Cronet_UploadDataSink_OnRewindErrorFunc = ::std::option::Option<
    unsafe extern "C" fn(self_: Cronet_UploadDataSinkPtr, error_message: Cronet_String),
>;
extern "C" {
    pub fn Cronet_UploadDataSink_CreateWith(
        OnReadSucceededFunc: Cronet_UploadDataSink_OnReadSucceededFunc,
        OnReadErrorFunc: Cronet_UploadDataSink_OnReadErrorFunc,
        OnRewindSucceededFunc: Cronet_UploadDataSink_OnRewindSucceededFunc,
        OnRewindErrorFunc: Cronet_UploadDataSink_OnRewindErrorFunc,
    ) -> Cronet_UploadDataSinkPtr;
}
extern "C" {
    pub fn Cronet_UploadDataProvider_Destroy(self_: Cronet_UploadDataProviderPtr);
}
extern "C" {
    pub fn Cronet_UploadDataProvider_SetClientContext(
        self_: Cronet_UploadDataProviderPtr,
        client_context: Cronet_ClientContext,
    );
}
extern "C" {
    pub fn Cronet_UploadDataProvider_GetClientContext(
        self_: Cronet_UploadDataProviderPtr,
    ) -> Cronet_ClientContext;
}
extern "C" {
    pub fn Cronet_UploadDataProvider_GetLength(self_: Cronet_UploadDataProviderPtr) -> i64;
}
extern "C" {
    pub fn Cronet_UploadDataProvider_Read(
        self_: Cronet_UploadDataProviderPtr,
        upload_data_sink: Cronet_UploadDataSinkPtr,
        buffer: Cronet_BufferPtr,
    );
}
extern "C" {
    pub fn Cronet_UploadDataProvider_Rewind(
        self_: Cronet_UploadDataProviderPtr,
        upload_data_sink: Cronet_UploadDataSinkPtr,
    );
}
extern "C" {
    pub fn Cronet_UploadDataProvider_Close(self_: Cronet_UploadDataProviderPtr);
}
pub type Cronet_UploadDataProvider_GetLengthFunc =
    ::std::option::Option<unsafe extern "C" fn(self_: Cronet_UploadDataProviderPtr) -> i64>;
pub type Cronet_UploadDataProvider_ReadFunc = ::std::option::Option<
    unsafe extern "C" fn(
        self_: Cronet_UploadDataProviderPtr,
        upload_data_sink: Cronet_UploadDataSinkPtr,
        buffer: Cronet_BufferPtr,
    ),
>;
pub type Cronet_UploadDataProvider_RewindFunc = ::std::option::Option<
    unsafe extern "C" fn(
        self_: Cronet_UploadDataProviderPtr,
        upload_data_sink: Cronet_UploadDataSinkPtr,
    ),
>;
pub type Cronet_UploadDataProvider_CloseFunc =
    ::std::option::Option<unsafe extern "C" fn(self_: Cronet_UploadDataProviderPtr)>;
extern "C" {
    pub fn Cronet_UploadDataProvider_CreateWith(
        GetLengthFunc: Cronet_UploadDataProvider_GetLengthFunc,
        ReadFunc: Cronet_UploadDataProvider_ReadFunc,
        RewindFunc: Cronet_UploadDataProvider_RewindFunc,
        CloseFunc: Cronet_UploadDataProvider_CloseFunc,
    ) -> Cronet_UploadDataProviderPtr;
}
extern "C" {
    pub fn Cronet_UrlRequest_Create() -> Cronet_UrlRequestPtr;
}
extern "C" {
    pub fn Cronet_UrlRequest_Destroy(self_: Cronet_UrlRequestPtr);
}
extern "C" {
    pub fn Cronet_UrlRequest_SetClientContext(
        self_: Cronet_UrlRequestPtr,
        client_context: Cronet_ClientContext,
    );
}
extern "C" {
    pub fn Cronet_UrlRequest_GetClientContext(self_: Cronet_UrlRequestPtr) -> Cronet_ClientContext;
}
extern "C" {
    pub fn Cronet_UrlRequest_InitWithParams(
        self_: Cronet_UrlRequestPtr,
        engine: Cronet_EnginePtr,
        url: Cronet_String,
        params: Cronet_UrlRequestParamsPtr,
        callback: Cronet_UrlRequestCallbackPtr,
        executor: Cronet_ExecutorPtr,
    ) -> Cronet_RESULT;
}
extern "C" {
    pub fn Cronet_UrlRequest_Start(self_: Cronet_UrlRequestPtr) -> Cronet_RESULT;
}
extern "C" {
    pub fn Cronet_UrlRequest_FollowRedirect(self_: Cronet_UrlRequestPtr) -> Cronet_RESULT;
}
extern "C" {
    pub fn Cronet_UrlRequest_Read(
        self_: Cronet_UrlRequestPtr,
        buffer: Cronet_BufferPtr,
    ) -> Cronet_RESULT;
}
extern "C" {
    pub fn Cronet_UrlRequest_Cancel(self_: Cronet_UrlRequestPtr);
}
extern "C" {
    pub fn Cronet_UrlRequest_IsDone(self_: Cronet_UrlRequestPtr) -> bool;
}
extern "C" {
    pub fn Cronet_UrlRequest_GetStatus(
        self_: Cronet_UrlRequestPtr,
        listener: Cronet_UrlRequestStatusListenerPtr,
    );
}
pub type Cronet_UrlRequest_InitWithParamsFunc = ::std::option::Option<
    unsafe extern "C" fn(
        self_: Cronet_UrlRequestPtr,
        engine: Cronet_EnginePtr,
        url: Cronet_String,
        params: Cronet_UrlRequestParamsPtr,
        callback: Cronet_UrlRequestCallbackPtr,
        executor: Cronet_ExecutorPtr,
    ) -> Cronet_RESULT,
>;
pub type Cronet_UrlRequest_StartFunc =
    ::std::option::Option<unsafe extern "C" fn(self_: Cronet_UrlRequestPtr) -> Cronet_RESULT>;
pub type Cronet_UrlRequest_FollowRedirectFunc =
    ::std::option::Option<unsafe extern "C" fn(self_: Cronet_UrlRequestPtr) -> Cronet_RESULT>;
pub type Cronet_UrlRequest_ReadFunc = ::std::option::Option<
    unsafe extern "C" fn(self_: Cronet_UrlRequestPtr, buffer: Cronet_BufferPtr) -> Cronet_RESULT,
>;
pub type Cronet_UrlRequest_CancelFunc =
    ::std::option::Option<unsafe extern "C" fn(self_: Cronet_UrlRequestPtr)>;
pub type Cronet_UrlRequest_IsDoneFunc =
    ::std::option::Option<unsafe extern "C" fn(self_: Cronet_UrlRequestPtr) -> bool>;
pub type Cronet_UrlRequest_GetStatusFunc = ::std::option::Option<
    unsafe extern "C" fn(self_: Cronet_UrlRequestPtr, listener: Cronet_UrlRequestStatusListenerPtr),
>;
extern "C" {
    pub fn Cronet_UrlRequest_CreateWith(
        InitWithParamsFunc: Cronet_UrlRequest_InitWithParamsFunc,
        StartFunc: Cronet_UrlRequest_StartFunc,
        FollowRedirectFunc: Cronet_UrlRequest_FollowRedirectFunc,
        ReadFunc: Cronet_UrlRequest_ReadFunc,
        CancelFunc: Cronet_UrlRequest_CancelFunc,
        IsDoneFunc: Cronet_UrlRequest_IsDoneFunc,
        GetStatusFunc: Cronet_UrlRequest_GetStatusFunc,
    ) -> Cronet_UrlRequestPtr;
}
extern "C" {
    pub fn Cronet_RequestFinishedInfoListener_Destroy(self_: Cronet_RequestFinishedInfoListenerPtr);
}
extern "C" {
    pub fn Cronet_RequestFinishedInfoListener_SetClientContext(
        self_: Cronet_RequestFinishedInfoListenerPtr,
        client_context: Cronet_ClientContext,
    );
}
extern "C" {
    pub fn Cronet_RequestFinishedInfoListener_GetClientContext(
        self_: Cronet_RequestFinishedInfoListenerPtr,
    ) -> Cronet_ClientContext;
}
extern "C" {
    pub fn Cronet_RequestFinishedInfoListener_OnRequestFinished(
        self_: Cronet_RequestFinishedInfoListenerPtr,
        request_info: Cronet_RequestFinishedInfoPtr,
        response_info: Cronet_UrlResponseInfoPtr,
        error: Cronet_ErrorPtr,
    );
}
pub type Cronet_RequestFinishedInfoListener_OnRequestFinishedFunc = ::std::option::Option<
    unsafe extern "C" fn(
        self_: Cronet_RequestFinishedInfoListenerPtr,
        request_info: Cronet_RequestFinishedInfoPtr,
        response_info: Cronet_UrlResponseInfoPtr,
        error: Cronet_ErrorPtr,
    ),
>;
extern "C" {
    pub fn Cronet_RequestFinishedInfoListener_CreateWith(
        OnRequestFinishedFunc: Cronet_RequestFinishedInfoListener_OnRequestFinishedFunc,
    ) -> Cronet_RequestFinishedInfoListenerPtr;
}
extern "C" {
    pub fn Cronet_Error_Create() -> Cronet_ErrorPtr;
}
extern "C" {
    pub fn Cronet_Error_Destroy(self_: Cronet_ErrorPtr);
}
extern "C" {
    pub fn Cronet_Error_error_code_set(self_: Cronet_ErrorPtr, error_code: Cronet_Error_ERROR_CODE);
}
extern "C" {
    pub fn Cronet_Error_message_set(self_: Cronet_ErrorPtr, message: Cronet_String);
}
extern "C" {
    pub fn Cronet_Error_internal_error_code_set(self_: Cronet_ErrorPtr, internal_error_code: i32);
}
extern "C" {
    pub fn Cronet_Error_immediately_retryable_set(
        self_: Cronet_ErrorPtr,
        immediately_retryable: bool,
    );
}
extern "C" {
    pub fn Cronet_Error_quic_detailed_error_code_set(
        self_: Cronet_ErrorPtr,
        quic_detailed_error_code: i32,
    );
}
extern "C" {
    pub fn Cronet_Error_error_code_get(self_: Cronet_ErrorPtr) -> Cronet_Error_ERROR_CODE;
}
extern "C" {
    pub fn Cronet_Error_message_get(self_: Cronet_ErrorPtr) -> Cronet_String;
}
extern "C" {
    pub fn Cronet_Error_internal_error_code_get(self_: Cronet_ErrorPtr) -> i32;
}
extern "C" {
    pub fn Cronet_Error_immediately_retryable_get(self_: Cronet_ErrorPtr) -> bool;
}
extern "C" {
    pub fn Cronet_Error_quic_detailed_error_code_get(self_: Cronet_ErrorPtr) -> i32;
}
extern "C" {
    pub fn Cronet_QuicHint_Create() -> Cronet_QuicHintPtr;
}
extern "C" {
    pub fn Cronet_QuicHint_Destroy(self_: Cronet_QuicHintPtr);
}
extern "C" {
    pub fn Cronet_QuicHint_host_set(self_: Cronet_QuicHintPtr, host: Cronet_String);
}
extern "C" {
    pub fn Cronet_QuicHint_port_set(self_: Cronet_QuicHintPtr, port: i32);
}
extern "C" {
    pub fn Cronet_QuicHint_alternate_port_set(self_: Cronet_QuicHintPtr, alternate_port: i32);
}
extern "C" {
    pub fn Cronet_QuicHint_host_get(self_: Cronet_QuicHintPtr) -> Cronet_String;
}
extern "C" {
    pub fn Cronet_QuicHint_port_get(self_: Cronet_QuicHintPtr) -> i32;
}
extern "C" {
    pub fn Cronet_QuicHint_alternate_port_get(self_: Cronet_QuicHintPtr) -> i32;
}
extern "C" {
    pub fn Cronet_PublicKeyPins_Create() -> Cronet_PublicKeyPinsPtr;
}
extern "C" {
    pub fn Cronet_PublicKeyPins_Destroy(self_: Cronet_PublicKeyPinsPtr);
}
extern "C" {
    pub fn Cronet_PublicKeyPins_host_set(self_: Cronet_PublicKeyPinsPtr, host: Cronet_String);
}
extern "C" {
    pub fn Cronet_PublicKeyPins_pins_sha256_add(
        self_: Cronet_PublicKeyPinsPtr,
        element: Cronet_String,
    );
}
extern "C" {
    pub fn Cronet_PublicKeyPins_include_subdomains_set(
        self_: Cronet_PublicKeyPinsPtr,
        include_subdomains: bool,
    );
}
extern "C" {
    pub fn Cronet_PublicKeyPins_expiration_date_set(
        self_: Cronet_PublicKeyPinsPtr,
        expiration_date: i64,
    );
}
extern "C" {
    pub fn Cronet_PublicKeyPins_host_get(self_: Cronet_PublicKeyPinsPtr) -> Cronet_String;
}
extern "C" {
    pub fn Cronet_PublicKeyPins_pins_sha256_size(self_: Cronet_PublicKeyPinsPtr) -> u32;
}
extern "C" {
    pub fn Cronet_PublicKeyPins_pins_sha256_at(
        self_: Cronet_PublicKeyPinsPtr,
        index: u32,
    ) -> Cronet_String;
}
extern "C" {
    pub fn Cronet_PublicKeyPins_pins_sha256_clear(self_: Cronet_PublicKeyPinsPtr);
}
extern "C" {
    pub fn Cronet_PublicKeyPins_include_subdomains_get(self_: Cronet_PublicKeyPinsPtr) -> bool;
}
extern "C" {
    pub fn Cronet_PublicKeyPins_expiration_date_get(self_: Cronet_PublicKeyPinsPtr) -> i64;
}
extern "C" {
    pub fn Cronet_EngineParams_Create() -> Cronet_EngineParamsPtr;
}
extern "C" {
    pub fn Cronet_EngineParams_Destroy(self_: Cronet_EngineParamsPtr);
}
extern "C" {
    pub fn Cronet_EngineParams_enable_check_result_set(
        self_: Cronet_EngineParamsPtr,
        enable_check_result: bool,
    );
}
extern "C" {
    pub fn Cronet_EngineParams_user_agent_set(
        self_: Cronet_EngineParamsPtr,
        user_agent: Cronet_String,
    );
}
extern "C" {
    pub fn Cronet_EngineParams_accept_language_set(
        self_: Cronet_EngineParamsPtr,
        accept_language: Cronet_String,
    );
}
extern "C" {
    pub fn Cronet_EngineParams_storage_path_set(
        self_: Cronet_EngineParamsPtr,
        storage_path: Cronet_String,
    );
}
extern "C" {
    pub fn Cronet_EngineParams_enable_quic_set(self_: Cronet_EngineParamsPtr, enable_quic: bool);
}
extern "C" {
    pub fn Cronet_EngineParams_enable_http2_set(self_: Cronet_EngineParamsPtr, enable_http2: bool);
}
extern "C" {
    pub fn Cronet_EngineParams_enable_brotli_set(
        self_: Cronet_EngineParamsPtr,
        enable_brotli: bool,
    );
}
extern "C" {
    pub fn Cronet_EngineParams_http_cache_mode_set(
        self_: Cronet_EngineParamsPtr,
        http_cache_mode: Cronet_EngineParams_HTTP_CACHE_MODE,
    );
}
extern "C" {
    pub fn Cronet_EngineParams_http_cache_max_size_set(
        self_: Cronet_EngineParamsPtr,
        http_cache_max_size: i64,
    );
}
extern "C" {
    pub fn Cronet_EngineParams_quic_hints_add(
        self_: Cronet_EngineParamsPtr,
        element: Cronet_QuicHintPtr,
    );
}
extern "C" {
    pub fn Cronet_EngineParams_public_key_pins_add(
        self_: Cronet_EngineParamsPtr,
        element: Cronet_PublicKeyPinsPtr,
    );
}
extern "C" {
    pub fn Cronet_EngineParams_enable_public_key_pinning_bypass_for_local_trust_anchors_set(
        self_: Cronet_EngineParamsPtr,
        enable_public_key_pinning_bypass_for_local_trust_anchors: bool,
    );
}
extern "C" {
    pub fn Cronet_EngineParams_network_thread_priority_set(
        self_: Cronet_EngineParamsPtr,
        network_thread_priority: f64,
    );
}
extern "C" {
    pub fn Cronet_EngineParams_experimental_options_set(
        self_: Cronet_EngineParamsPtr,
        experimental_options: Cronet_String,
    );
}
extern "C" {
    pub fn Cronet_EngineParams_enable_check_result_get(self_: Cronet_EngineParamsPtr) -> bool;
}
extern "C" {
    pub fn Cronet_EngineParams_user_agent_get(self_: Cronet_EngineParamsPtr) -> Cronet_String;
}
extern "C" {
    pub fn Cronet_EngineParams_accept_language_get(self_: Cronet_EngineParamsPtr) -> Cronet_String;
}
extern "C" {
    pub fn Cronet_EngineParams_storage_path_get(self_: Cronet_EngineParamsPtr) -> Cronet_String;
}
extern "C" {
    pub fn Cronet_EngineParams_enable_quic_get(self_: Cronet_EngineParamsPtr) -> bool;
}
extern "C" {
    pub fn Cronet_EngineParams_enable_http2_get(self_: Cronet_EngineParamsPtr) -> bool;
}
extern "C" {
    pub fn Cronet_EngineParams_enable_brotli_get(self_: Cronet_EngineParamsPtr) -> bool;
}
extern "C" {
    pub fn Cronet_EngineParams_http_cache_mode_get(
        self_: Cronet_EngineParamsPtr,
    ) -> Cronet_EngineParams_HTTP_CACHE_MODE;
}
extern "C" {
    pub fn Cronet_EngineParams_http_cache_max_size_get(self_: Cronet_EngineParamsPtr) -> i64;
}
extern "C" {
    pub fn Cronet_EngineParams_quic_hints_size(self_: Cronet_EngineParamsPtr) -> u32;
}
extern "C" {
    pub fn Cronet_EngineParams_quic_hints_at(
        self_: Cronet_EngineParamsPtr,
        index: u32,
    ) -> Cronet_QuicHintPtr;
}
extern "C" {
    pub fn Cronet_EngineParams_quic_hints_clear(self_: Cronet_EngineParamsPtr);
}
extern "C" {
    pub fn Cronet_EngineParams_public_key_pins_size(self_: Cronet_EngineParamsPtr) -> u32;
}
extern "C" {
    pub fn Cronet_EngineParams_public_key_pins_at(
        self_: Cronet_EngineParamsPtr,
        index: u32,
    ) -> Cronet_PublicKeyPinsPtr;
}
extern "C" {
    pub fn Cronet_EngineParams_public_key_pins_clear(self_: Cronet_EngineParamsPtr);
}
extern "C" {
    pub fn Cronet_EngineParams_enable_public_key_pinning_bypass_for_local_trust_anchors_get(
        self_: Cronet_EngineParamsPtr,
    ) -> bool;
}
extern "C" {
    pub fn Cronet_EngineParams_network_thread_priority_get(self_: Cronet_EngineParamsPtr) -> f64;
}
extern "C" {
    pub fn Cronet_EngineParams_experimental_options_get(
        self_: Cronet_EngineParamsPtr,
    ) -> Cronet_String;
}
extern "C" {
    pub fn Cronet_HttpHeader_Create() -> Cronet_HttpHeaderPtr;
}
extern "C" {
    pub fn Cronet_HttpHeader_Destroy(self_: Cronet_HttpHeaderPtr);
}
extern "C" {
    pub fn Cronet_HttpHeader_name_set(self_: Cronet_HttpHeaderPtr, name: Cronet_String);
}
extern "C" {
    pub fn Cronet_HttpHeader_value_set(self_: Cronet_HttpHeaderPtr, value: Cronet_String);
}
extern "C" {
    pub fn Cronet_HttpHeader_name_get(self_: Cronet_HttpHeaderPtr) -> Cronet_String;
}
extern "C" {
    pub fn Cronet_HttpHeader_value_get(self_: Cronet_HttpHeaderPtr) -> Cronet_String;
}
extern "C" {
    pub fn Cronet_UrlResponseInfo_Create() -> Cronet_UrlResponseInfoPtr;
}
extern "C" {
    pub fn Cronet_UrlResponseInfo_Destroy(self_: Cronet_UrlResponseInfoPtr);
}
extern "C" {
    pub fn Cronet_UrlResponseInfo_url_set(self_: Cronet_UrlResponseInfoPtr, url: Cronet_String);
}
extern "C" {
    pub fn Cronet_UrlResponseInfo_url_chain_add(
        self_: Cronet_UrlResponseInfoPtr,
        element: Cronet_String,
    );
}
extern "C" {
    pub fn Cronet_UrlResponseInfo_http_status_code_set(
        self_: Cronet_UrlResponseInfoPtr,
        http_status_code: i32,
    );
}
extern "C" {
    pub fn Cronet_UrlResponseInfo_http_status_text_set(
        self_: Cronet_UrlResponseInfoPtr,
        http_status_text: Cronet_String,
    );
}
extern "C" {
    pub fn Cronet_UrlResponseInfo_all_headers_list_add(
        self_: Cronet_UrlResponseInfoPtr,
        element: Cronet_HttpHeaderPtr,
    );
}
extern "C" {
    pub fn Cronet_UrlResponseInfo_was_cached_set(
        self_: Cronet_UrlResponseInfoPtr,
        was_cached: bool,
    );
}
extern "C" {
    pub fn Cronet_UrlResponseInfo_negotiated_protocol_set(
        self_: Cronet_UrlResponseInfoPtr,
        negotiated_protocol: Cronet_String,
    );
}
extern "C" {
    pub fn Cronet_UrlResponseInfo_proxy_server_set(
        self_: Cronet_UrlResponseInfoPtr,
        proxy_server: Cronet_String,
    );
}
extern "C" {
    pub fn Cronet_UrlResponseInfo_received_byte_count_set(
        self_: Cronet_UrlResponseInfoPtr,
        received_byte_count: i64,
    );
}
extern "C" {
    pub fn Cronet_UrlResponseInfo_url_get(self_: Cronet_UrlResponseInfoPtr) -> Cronet_String;
}
extern "C" {
    pub fn Cronet_UrlResponseInfo_url_chain_size(self_: Cronet_UrlResponseInfoPtr) -> u32;
}
extern "C" {
    pub fn Cronet_UrlResponseInfo_url_chain_at(
        self_: Cronet_UrlResponseInfoPtr,
        index: u32,
    ) -> Cronet_String;
}
extern "C" {
    pub fn Cronet_UrlResponseInfo_url_chain_clear(self_: Cronet_UrlResponseInfoPtr);
}
extern "C" {
    pub fn Cronet_UrlResponseInfo_http_status_code_get(self_: Cronet_UrlResponseInfoPtr) -> i32;
}
extern "C" {
    pub fn Cronet_UrlResponseInfo_http_status_text_get(
        self_: Cronet_UrlResponseInfoPtr,
    ) -> Cronet_String;
}
extern "C" {
    pub fn Cronet_UrlResponseInfo_all_headers_list_size(self_: Cronet_UrlResponseInfoPtr) -> u32;
}
extern "C" {
    pub fn Cronet_UrlResponseInfo_all_headers_list_at(
        self_: Cronet_UrlResponseInfoPtr,
        index: u32,
    ) -> Cronet_HttpHeaderPtr;
}
extern "C" {
    pub fn Cronet_UrlResponseInfo_all_headers_list_clear(self_: Cronet_UrlResponseInfoPtr);
}
extern "C" {
    pub fn Cronet_UrlResponseInfo_was_cached_get(self_: Cronet_UrlResponseInfoPtr) -> bool;
}
extern "C" {
    pub fn Cronet_UrlResponseInfo_negotiated_protocol_get(
        self_: Cronet_UrlResponseInfoPtr,
    ) -> Cronet_String;
}
extern "C" {
    pub fn Cronet_UrlResponseInfo_proxy_server_get(
        self_: Cronet_UrlResponseInfoPtr,
    ) -> Cronet_String;
}
extern "C" {
    pub fn Cronet_UrlResponseInfo_received_byte_count_get(self_: Cronet_UrlResponseInfoPtr) -> i64;
}
extern "C" {
    pub fn Cronet_UrlRequestParams_Create() -> Cronet_UrlRequestParamsPtr;
}
extern "C" {
    pub fn Cronet_UrlRequestParams_Destroy(self_: Cronet_UrlRequestParamsPtr);
}
extern "C" {
    pub fn Cronet_UrlRequestParams_http_method_set(
        self_: Cronet_UrlRequestParamsPtr,
        http_method: Cronet_String,
    );
}
extern "C" {
    pub fn Cronet_UrlRequestParams_request_headers_add(
        self_: Cronet_UrlRequestParamsPtr,
        element: Cronet_HttpHeaderPtr,
    );
}
extern "C" {
    pub fn Cronet_UrlRequestParams_disable_cache_set(
        self_: Cronet_UrlRequestParamsPtr,
        disable_cache: bool,
    );
}
extern "C" {
    pub fn Cronet_UrlRequestParams_priority_set(
        self_: Cronet_UrlRequestParamsPtr,
        priority: Cronet_UrlRequestParams_REQUEST_PRIORITY,
    );
}
extern "C" {
    pub fn Cronet_UrlRequestParams_upload_data_provider_set(
        self_: Cronet_UrlRequestParamsPtr,
        upload_data_provider: Cronet_UploadDataProviderPtr,
    );
}
extern "C" {
    pub fn Cronet_UrlRequestParams_upload_data_provider_executor_set(
        self_: Cronet_UrlRequestParamsPtr,
        upload_data_provider_executor: Cronet_ExecutorPtr,
    );
}
extern "C" {
    pub fn Cronet_UrlRequestParams_allow_direct_executor_set(
        self_: Cronet_UrlRequestParamsPtr,
        allow_direct_executor: bool,
    );
}
extern "C" {
    pub fn Cronet_UrlRequestParams_annotations_add(
        self_: Cronet_UrlRequestParamsPtr,
        element: Cronet_RawDataPtr,
    );
}
extern "C" {
    pub fn Cronet_UrlRequestParams_request_finished_listener_set(
        self_: Cronet_UrlRequestParamsPtr,
        request_finished_listener: Cronet_RequestFinishedInfoListenerPtr,
    );
}
extern "C" {
    pub fn Cronet_UrlRequestParams_request_finished_executor_set(
        self_: Cronet_UrlRequestParamsPtr,
        request_finished_executor: Cronet_ExecutorPtr,
    );
}
extern "C" {
    pub fn Cronet_UrlRequestParams_idempotency_set(
        self_: Cronet_UrlRequestParamsPtr,
        idempotency: Cronet_UrlRequestParams_IDEMPOTENCY,
    );
}
extern "C" {
    pub fn Cronet_UrlRequestParams_http_method_get(
        self_: Cronet_UrlRequestParamsPtr,
    ) -> Cronet_String;
}
extern "C" {
    pub fn Cronet_UrlRequestParams_request_headers_size(self_: Cronet_UrlRequestParamsPtr) -> u32;
}
extern "C" {
    pub fn Cronet_UrlRequestParams_request_headers_at(
        self_: Cronet_UrlRequestParamsPtr,
        index: u32,
    ) -> Cronet_HttpHeaderPtr;
}
extern "C" {
    pub fn Cronet_UrlRequestParams_request_headers_clear(self_: Cronet_UrlRequestParamsPtr);
}
extern "C" {
    pub fn Cronet_UrlRequestParams_disable_cache_get(self_: Cronet_UrlRequestParamsPtr) -> bool;
}
extern "C" {
    pub fn Cronet_UrlRequestParams_priority_get(
        self_: Cronet_UrlRequestParamsPtr,
    ) -> Cronet_UrlRequestParams_REQUEST_PRIORITY;
}
extern "C" {
    pub fn Cronet_UrlRequestParams_upload_data_provider_get(
        self_: Cronet_UrlRequestParamsPtr,
    ) -> Cronet_UploadDataProviderPtr;
}
extern "C" {
    pub fn Cronet_UrlRequestParams_upload_data_provider_executor_get(
        self_: Cronet_UrlRequestParamsPtr,
    ) -> Cronet_ExecutorPtr;
}
extern "C" {
    pub fn Cronet_UrlRequestParams_allow_direct_executor_get(
        self_: Cronet_UrlRequestParamsPtr,
    ) -> bool;
}
extern "C" {
    pub fn Cronet_UrlRequestParams_annotations_size(self_: Cronet_UrlRequestParamsPtr) -> u32;
}
extern "C" {
    pub fn Cronet_UrlRequestParams_annotations_at(
        self_: Cronet_UrlRequestParamsPtr,
        index: u32,
    ) -> Cronet_RawDataPtr;
}
extern "C" {
    pub fn Cronet_UrlRequestParams_annotations_clear(self_: Cronet_UrlRequestParamsPtr);
}
extern "C" {
    pub fn Cronet_UrlRequestParams_request_finished_listener_get(
        self_: Cronet_UrlRequestParamsPtr,
    ) -> Cronet_RequestFinishedInfoListenerPtr;
}
extern "C" {
    pub fn Cronet_UrlRequestParams_request_finished_executor_get(
        self_: Cronet_UrlRequestParamsPtr,
    ) -> Cronet_ExecutorPtr;
}
extern "C" {
    pub fn Cronet_UrlRequestParams_idempotency_get(
        self_: Cronet_UrlRequestParamsPtr,
    ) -> Cronet_UrlRequestParams_IDEMPOTENCY;
}
extern "C" {
    pub fn Cronet_DateTime_Create() -> Cronet_DateTimePtr;
}
extern "C" {
    pub fn Cronet_DateTime_Destroy(self_: Cronet_DateTimePtr);
}
extern "C" {
    pub fn Cronet_DateTime_value_set(self_: Cronet_DateTimePtr, value: i64);
}
extern "C" {
    pub fn Cronet_DateTime_value_get(self_: Cronet_DateTimePtr) -> i64;
}
extern "C" {
    pub fn Cronet_Metrics_Create() -> Cronet_MetricsPtr;
}
extern "C" {
    pub fn Cronet_Metrics_Destroy(self_: Cronet_MetricsPtr);
}
extern "C" {
    pub fn Cronet_Metrics_request_start_set(
        self_: Cronet_MetricsPtr,
        request_start: Cronet_DateTimePtr,
    );
}
extern "C" {
    pub fn Cronet_Metrics_request_start_move(
        self_: Cronet_MetricsPtr,
        request_start: Cronet_DateTimePtr,
    );
}
extern "C" {
    pub fn Cronet_Metrics_dns_start_set(self_: Cronet_MetricsPtr, dns_start: Cronet_DateTimePtr);
}
extern "C" {
    pub fn Cronet_Metrics_dns_start_move(self_: Cronet_MetricsPtr, dns_start: Cronet_DateTimePtr);
}
extern "C" {
    pub fn Cronet_Metrics_dns_end_set(self_: Cronet_MetricsPtr, dns_end: Cronet_DateTimePtr);
}
extern "C" {
    pub fn Cronet_Metrics_dns_end_move(self_: Cronet_MetricsPtr, dns_end: Cronet_DateTimePtr);
}
extern "C" {
    pub fn Cronet_Metrics_connect_start_set(
        self_: Cronet_MetricsPtr,
        connect_start: Cronet_DateTimePtr,
    );
}
extern "C" {
    pub fn Cronet_Metrics_connect_start_move(
        self_: Cronet_MetricsPtr,
        connect_start: Cronet_DateTimePtr,
    );
}
extern "C" {
    pub fn Cronet_Metrics_connect_end_set(
        self_: Cronet_MetricsPtr,
        connect_end: Cronet_DateTimePtr,
    );
}
extern "C" {
    pub fn Cronet_Metrics_connect_end_move(
        self_: Cronet_MetricsPtr,
        connect_end: Cronet_DateTimePtr,
    );
}
extern "C" {
    pub fn Cronet_Metrics_ssl_start_set(self_: Cronet_MetricsPtr, ssl_start: Cronet_DateTimePtr);
}
extern "C" {
    pub fn Cronet_Metrics_ssl_start_move(self_: Cronet_MetricsPtr, ssl_start: Cronet_DateTimePtr);
}
extern "C" {
    pub fn Cronet_Metrics_ssl_end_set(self_: Cronet_MetricsPtr, ssl_end: Cronet_DateTimePtr);
}
extern "C" {
    pub fn Cronet_Metrics_ssl_end_move(self_: Cronet_MetricsPtr, ssl_end: Cronet_DateTimePtr);
}
extern "C" {
    pub fn Cronet_Metrics_sending_start_set(
        self_: Cronet_MetricsPtr,
        sending_start: Cronet_DateTimePtr,
    );
}
extern "C" {
    pub fn Cronet_Metrics_sending_start_move(
        self_: Cronet_MetricsPtr,
        sending_start: Cronet_DateTimePtr,
    );
}
extern "C" {
    pub fn Cronet_Metrics_sending_end_set(
        self_: Cronet_MetricsPtr,
        sending_end: Cronet_DateTimePtr,
    );
}
extern "C" {
    pub fn Cronet_Metrics_sending_end_move(
        self_: Cronet_MetricsPtr,
        sending_end: Cronet_DateTimePtr,
    );
}
extern "C" {
    pub fn Cronet_Metrics_push_start_set(self_: Cronet_MetricsPtr, push_start: Cronet_DateTimePtr);
}
extern "C" {
    pub fn Cronet_Metrics_push_start_move(self_: Cronet_MetricsPtr, push_start: Cronet_DateTimePtr);
}
extern "C" {
    pub fn Cronet_Metrics_push_end_set(self_: Cronet_MetricsPtr, push_end: Cronet_DateTimePtr);
}
extern "C" {
    pub fn Cronet_Metrics_push_end_move(self_: Cronet_MetricsPtr, push_end: Cronet_DateTimePtr);
}
extern "C" {
    pub fn Cronet_Metrics_response_start_set(
        self_: Cronet_MetricsPtr,
        response_start: Cronet_DateTimePtr,
    );
}
extern "C" {
    pub fn Cronet_Metrics_response_start_move(
        self_: Cronet_MetricsPtr,
        response_start: Cronet_DateTimePtr,
    );
}
extern "C" {
    pub fn Cronet_Metrics_request_end_set(
        self_: Cronet_MetricsPtr,
        request_end: Cronet_DateTimePtr,
    );
}
extern "C" {
    pub fn Cronet_Metrics_request_end_move(
        self_: Cronet_MetricsPtr,
        request_end: Cronet_DateTimePtr,
    );
}
extern "C" {
    pub fn Cronet_Metrics_socket_reused_set(self_: Cronet_MetricsPtr, socket_reused: bool);
}
extern "C" {
    pub fn Cronet_Metrics_sent_byte_count_set(self_: Cronet_MetricsPtr, sent_byte_count: i64);
}
extern "C" {
    pub fn Cronet_Metrics_received_byte_count_set(
        self_: Cronet_MetricsPtr,
        received_byte_count: i64,
    );
}
extern "C" {
    pub fn Cronet_Metrics_request_start_get(self_: Cronet_MetricsPtr) -> Cronet_DateTimePtr;
}
extern "C" {
    pub fn Cronet_Metrics_dns_start_get(self_: Cronet_MetricsPtr) -> Cronet_DateTimePtr;
}
extern "C" {
    pub fn Cronet_Metrics_dns_end_get(self_: Cronet_MetricsPtr) -> Cronet_DateTimePtr;
}
extern "C" {
    pub fn Cronet_Metrics_connect_start_get(self_: Cronet_MetricsPtr) -> Cronet_DateTimePtr;
}
extern "C" {
    pub fn Cronet_Metrics_connect_end_get(self_: Cronet_MetricsPtr) -> Cronet_DateTimePtr;
}
extern "C" {
    pub fn Cronet_Metrics_ssl_start_get(self_: Cronet_MetricsPtr) -> Cronet_DateTimePtr;
}
extern "C" {
    pub fn Cronet_Metrics_ssl_end_get(self_: Cronet_MetricsPtr) -> Cronet_DateTimePtr;
}
extern "C" {
    pub fn Cronet_Metrics_sending_start_get(self_: Cronet_MetricsPtr) -> Cronet_DateTimePtr;
}
extern "C" {
    pub fn Cronet_Metrics_sending_end_get(self_: Cronet_MetricsPtr) -> Cronet_DateTimePtr;
}
extern "C" {
    pub fn Cronet_Metrics_push_start_get(self_: Cronet_MetricsPtr) -> Cronet_DateTimePtr;
}
extern "C" {
    pub fn Cronet_Metrics_push_end_get(self_: Cronet_MetricsPtr) -> Cronet_DateTimePtr;
}
extern "C" {
    pub fn Cronet_Metrics_response_start_get(self_: Cronet_MetricsPtr) -> Cronet_DateTimePtr;
}
extern "C" {
    pub fn Cronet_Metrics_request_end_get(self_: Cronet_MetricsPtr) -> Cronet_DateTimePtr;
}
extern "C" {
    pub fn Cronet_Metrics_socket_reused_get(self_: Cronet_MetricsPtr) -> bool;
}
extern "C" {
    pub fn Cronet_Metrics_sent_byte_count_get(self_: Cronet_MetricsPtr) -> i64;
}
extern "C" {
    pub fn Cronet_Metrics_received_byte_count_get(self_: Cronet_MetricsPtr) -> i64;
}
extern "C" {
    pub fn Cronet_RequestFinishedInfo_Create() -> Cronet_RequestFinishedInfoPtr;
}
extern "C" {
    pub fn Cronet_RequestFinishedInfo_Destroy(self_: Cronet_RequestFinishedInfoPtr);
}
extern "C" {
    pub fn Cronet_RequestFinishedInfo_metrics_set(
        self_: Cronet_RequestFinishedInfoPtr,
        metrics: Cronet_MetricsPtr,
    );
}
extern "C" {
    pub fn Cronet_RequestFinishedInfo_metrics_move(
        self_: Cronet_RequestFinishedInfoPtr,
        metrics: Cronet_MetricsPtr,
    );
}
extern "C" {
    pub fn Cronet_RequestFinishedInfo_annotations_add(
        self_: Cronet_RequestFinishedInfoPtr,
        element: Cronet_RawDataPtr,
    );
}
extern "C" {
    pub fn Cronet_RequestFinishedInfo_finished_reason_set(
        self_: Cronet_RequestFinishedInfoPtr,
        finished_reason: Cronet_RequestFinishedInfo_FINISHED_REASON,
    );
}
extern "C" {
    pub fn Cronet_RequestFinishedInfo_metrics_get(
        self_: Cronet_RequestFinishedInfoPtr,
    ) -> Cronet_MetricsPtr;
}
extern "C" {
    pub fn Cronet_RequestFinishedInfo_annotations_size(self_: Cronet_RequestFinishedInfoPtr)
        -> u32;
}
extern "C" {
    pub fn Cronet_RequestFinishedInfo_annotations_at(
        self_: Cronet_RequestFinishedInfoPtr,
        index: u32,
    ) -> Cronet_RawDataPtr;
}
extern "C" {
    pub fn Cronet_RequestFinishedInfo_annotations_clear(self_: Cronet_RequestFinishedInfoPtr);
}
extern "C" {
    pub fn Cronet_RequestFinishedInfo_finished_reason_get(
        self_: Cronet_RequestFinishedInfoPtr,
    ) -> Cronet_RequestFinishedInfo_FINISHED_REASON;
}
